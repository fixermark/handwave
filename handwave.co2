;; -*- mode: scheme; -*-

(do

 (nes-header #:num-prg 1 #:num-chr 1 #:mapper 0 #:mirroring vertical)

 ;; memory mapping
 (defaddr sprite-data #x200) ;; where the sprite control data is
 (defconst sprite-dma 2) ;; dma address is 100X this = $200
 (defaddr pad-data #x300) ;; pad data for controllers 1 to 4, 4 bytes
 (defaddr pad-data-last-frame #x304)  ;; pad data from last frame, 4 bytes
 (defaddr pad-press #x308)  ;; which buttons were pressed this frame, 4 bytes
 (defaddr notes-to-sound #x30c)  ;; notes to start sounding this frame, 2 bytes
 (defaddr sprite-pos-x #x30e) ;; current sprite position (x coord), 16 bytes
 (defaddr sprite-pos-y #x31e)  ;; current sprite position (y coord), 16 bytes
 (defaddr sprite-anim-frame #x32e)  ;; sprite animation frame counter, 16 bytes

 (defconst ppu-name-table-0 #x2000)
 (defconst ppu-name-table-1 #x2400)
 (defconst ppu-palette #x3f00)

 (defconst game-on-ppu-ctrl #b10000000)
 (defconst ppu-ctrl-vram-increment-mask #b00000100)


 ;; CHRs used by sprites
 (defconst left-arrow-chr 1)
 (defconst right-arrow-chr 2)
 (defconst b-button-chr 3)
 (defconst a-button-chr 4)
 (defconst staff-chr 5)
 (defconst note-chr 6)

 ;; background rendering constants
 (defconst background-start-offset-1 #x2100)
 (defconst background-start-offset-2 #x2500)

 ;; sprite rendering constants
 (defconst num-sprites 16)
 (defconst num-waves 16)
 (defconst ANIM-STOPPED #xFF)
 (defconst sprite-x-offset 40)
 (defconst first-sprite-y-offset 64)

 ;; control pad button masks in pad-data
 (defconst joypad-a      #b10000000)
 (defconst joypad-b      #b01000000)
 (defconst joypad-select #b00100000)
 (defconst joypad-start  #b00010000)
 (defconst joypad-up     #b00001000)
 (defconst joypad-down   #b00000100)
 (defconst joypad-left   #b00000010)
 (defconst joypad-right  #b00000001)

 (defconst render-to-playback-beat-gap 27)

 ;; code start
 (program-begin #xc000)

 ;; a global frame counter
 (defvar gframe 0)
 ;; which of the 2 pulse waves we are playing from, 0 for P1, 1 for P2
 (defvar g-which-pulse 0)
 ;; scroll logic
 (defvar g-scroll-high 0)
 (defvar g-scroll-low 0)
 (defvar g-scroll-delay-ctr 0)
 ;; song control
 (defvar g-playing 0) ; are we playing a song?
 (defvar g-next-frame-render-notes-high-byte 0)
 (defvar g-next-frame-render-notes-low-byte 0)
 (defvar g-next-frame-play-notes-high-byte 0)
 (defvar g-next-frame-play-notes-low-byte 0)
 (defpointer g-song-render-index)  ; current byte of song render logic
 (defvar g-song-render-rest 0)  ; if > 0, # of beats to rest before continuing rendering notes
 (defpointer g-song-play-index)  ; current byte of song auto-play control logic
 (defvar g-song-play-rest 0)  ; if > 0, # of beats to rest before continuing playing notes


 ;; debugging
 (defvar g-debug 0)

 (defvector (reset)
   (init-system)
   ;; disable all graphics.
   (set! REG-PPU-CTRL 0)
   (set! REG-PPU-MASK 0)
   ;; init graphics
   (init-graphics)
   ;; set basic ppu registers.  load background from $0000,
   ;; sprites from $0000, and the name table from $2000.
   (set! REG-PPU-CTRL game-on-ppu-ctrl)
   (set! REG-PPU-MASK #b00011110)
   ;; enable audio tools for system
   (set! REG-APU-CHANNEL #b00000111)
   ;; set up playback
   (set! g-song-play-rest render-to-playback-beat-gap)
   (set-pointer! g-song-render-index song1)
   (set-pointer! g-song-play-index song1)
   (asm
    ;; go into an infite loop - vblank interrupt takes over
    "loop: jmp loop"))

 (defsub (init-graphics)
   (load-bg #x00)
   (load-palette)
   (load-staff)
   (init-sprites))

 (defsub (load-bg chr-code)
   (loop n 0 3
	 (ppu-memset ppu-name-table-0 n 0 128 chr-code)
	 (ppu-memset ppu-name-table-0 n #x80 128 chr-code))
   (ppu-memset ppu-name-table-0 3 0 128 chr-code)
   (ppu-memset ppu-name-table-0 3 #x80 (- #xC0 #x80) chr-code)
   (loop n 0 3
	 (ppu-memset ppu-name-table-1 n 0 128 chr-code)
	 (ppu-memset ppu-name-table-1 n #x80 128 chr-code))
   (ppu-memset ppu-name-table-1 3 0 128 chr-code)
   (ppu-memset ppu-name-table-1 3 #x80 (- #xC0 #x80) chr-code)
   )

 (defsub (load-staff)
   (poke! REG-PPU-ADDR (high background-start-offset-1))
   (poke! REG-PPU-ADDR (low background-start-offset-1))
   (plot-staff-on-one-scroll-buffer)
   (poke! REG-PPU-ADDR (high background-start-offset-2))
   (poke! REG-PPU-ADDR (low background-start-offset-2))
   (plot-staff-on-one-scroll-buffer))

 (defsub (plot-staff-on-one-scroll-buffer)
   ;; 16 rows of buttons, so we do this step 32 * 16 = 512 times
   (loop n 0 16
	 (loop k 0 32
	       (poke! REG-PPU-DATA staff-chr))))

 (defsub (load-palette)
   (ppu-memcpy ppu-palette 0 0 #x20 palette 0))

 (defsub (init-sprites)
   (loop n 0 num-sprites
	 (set-sprite-x! n sprite-x-offset)
	 (set-sprite-y! n (+ first-sprite-y-offset (<< n 3)))
	 ;; sprite ID rotates 1 to 4
	 (set-sprite-id! n (+ 1 (and n #x03)))
	 ;; every 4 sprites get same palette
	 (set-sprite-attr! n (>> n 2))
	 (poke! sprite-pos-x n sprite-x-offset)
	 (poke! sprite-pos-y n (+ first-sprite-y-offset (<< n 3)))
	 (poke! sprite-anim-frame n ANIM-STOPPED)))

 (defvector (nmi)
   ;;; TIMING CRITICAL CODE: must finish during vblank
   ;; some test logic for updating notes
   (if (eq? 0 (and g-scroll-low #b00000111))
       (plot-notes g-next-frame-render-notes-low-byte g-next-frame-render-notes-high-byte)
       #f)
   ;; start sprite data dma to the oam
   (set! REG-OAM-DMA sprite-dma)

   (set! REG-PPU-SCROLL g-scroll-low)
   (set! REG-PPU-SCROLL 0)
   (set! REG-PPU-CTRL (or game-on-ppu-ctrl g-scroll-high))
   ;;; END TIMING CRITICAL CODE
   (inc gframe)
   (update-scroll)
   (read-joypads)
   (check-wave-activations)
   (play-notes)
   (anim-sprites))




 ;;;; GAME LOGIC
 ;; check controller inputs for wave activations
 (defsub (check-wave-activations)
   (let ((offset1) (offset2))
     (loop n 0 num-waves
	   (set! offset1 (<< n 1))
	   (set! offset2 (+ 1 offset1))
	 (if (button-pressed (peek controller-mapping offset1) (peek controller-mapping offset2))
	     (on-wave-triggered n)
	     #f))))

 (defsub (on-wave-triggered which-wave)
   (poke! sprite-anim-frame which-wave 0)
   (sound-note which-wave))

 ;; primes a note to be sounded this cycle
 (defsub (sound-note which-note)
   (let ((bank))
     (if (> which-note 7)
	 (do
	     (set! bank 1)
	     (set! which-note (- which-note 8)))
	 (set! bank 0))
     (poke! notes-to-sound bank (or (peek notes-to-sound bank) (roll-left-n #x1 which-note)))))

 ;; utility function to roll a value n to the left
 (defsub (roll-left-n value count)
   ; surprisingly, this seems necessary to catch 0 counts
   (if (eq? count 0)
       (return value)
       #f)
   (loop n 0 count
	 (set! value (<< value 1)))
   (return value))


 ;; updates one frame of note draw animation
 (defsub (step-draw-note)
   (set! g-next-frame-render-notes-high-byte 0)
   (set! g-next-frame-render-notes-low-byte 0)
   (if (> g-song-render-rest 0)
       (do
	   (dec g-song-render-rest)
	   (return))
       #f)
   (let ((stepping) (mode))
     (set! stepping 1)
     (while stepping
	    (set-multiple! mode g-next-frame-render-notes-high-byte g-next-frame-render-notes-low-byte
			   (handle-next-draw-note g-next-frame-render-notes-high-byte g-next-frame-render-notes-low-byte))
	    (cond
	     ((and mode #x1)
	      (set! stepping 0)
	      (set! g-song-render-rest (>> mode 2))
	      )))))

 ;; Reads the next command (or commands) in the song and processes it
 ;; return mode, high-byte-notes, low-byte-notes
 ;; 'mode' is mode of operation for next run, #b0NNNNNCC
 ;; CC values
 ;; 0 - normal mode; read and process next byte
 ;; 1 - do a rest; NNNNN is how long (with 0 meaning single-step rest)
 ;; returns next mode, high byte, low byte of which notes to render
 (defsub (handle-next-draw-note high-byte-notes low-byte-notes)
   (let ((cur-note) (rest-after-this-note))
     (set! cur-note (peek g-song-render-index))
     (set! rest-after-this-note (and #b10000000 cur-note))
     (cond
      ((and cur-note #x1)
       (if (eq? 0 (and cur-note #b00000110))  ; directive mode
	   (return #x1 0 0)
	   #f))
      ((eq? #x00 (and cur-note #b00000110))  ; rest
       (inc-g-song-render-index)
       (return
	(or #x1 (and #b01111100 (>> cur-note 1)))
	high-byte-notes
	low-byte-notes))
      ((eq? #x02 (and cur-note #b00000110))  ; strike-note
       (set-multiple! high-byte-notes low-byte-notes
		      (add-note-index-to-mask (and #b00001111 (>> cur-note 3)) high-byte-notes low-byte-notes))
       (inc-g-song-render-index)
       (if rest-after-this-note
	   (return #x1 high-byte-notes low-byte-notes)
	   (return 0 high-byte-notes low-byte-notes))))))

 (defsub (add-note-index-to-mask note-index high-byte-notes low-byte-notes)
   (let ((add-to-high) (note-offset))
     (if (> note-index 7)
	 (do
	     (set! add-to-high 1)
	     (set! note-index (- note-index 8)))
	 (set! add-to-high 0))
     (set! note-offset (roll-left-n 1 note-index))
     (if add-to-high
	 (set! high-byte-notes (or high-byte-notes note-offset))
	 (set! low-byte-notes (or low-byte-notes note-offset)))
     (return high-byte-notes low-byte-notes)))

 (defsub (inc-g-song-render-index)
   (let ((tmp))
     (set! tmp 1)
     (set-pointer! g-song-render-index (+ g-song-render-index tmp))))


 (defsub (auto-play-notes)
   (set! g-next-frame-play-notes-high-byte 0)
   (set! g-next-frame-play-notes-low-byte 0)
   (if (> g-song-play-rest 0)
       (do
	   (dec g-song-play-rest)
	   (return))
       #f)
   (let ((stepping) (mode))
     (set! stepping 1)
     (while stepping
	    (set-multiple! mode g-next-frame-play-notes-high-byte g-next-frame-play-notes-low-byte
			   (handle-next-play-note g-next-frame-play-notes-high-byte g-next-frame-play-notes-low-byte))
	    (cond
	     ((and mode #x1)
	      (set! stepping 0)
	      (set! g-song-play-rest (>> mode 2))
	      )))
     (poke! notes-to-sound 0 (or (peek notes-to-sound 0) g-next-frame-play-notes-low-byte))
     (poke! notes-to-sound 1 (or (peek notes-to-sound 1) g-next-frame-play-notes-high-byte))))

 ;; Reads the next command (or commands) in the song and processes it
 ;; return mode, high-byte-notes, low-byte-notes
 ;; 'mode' is mode of operation for next run, #b0NNNNNCC
 ;; CC values
 ;; 0 - normal mode; read and process next byte
 ;; 1 - do a rest; NNNNN is how long (with 0 meaning single-step rest)
 ;; returns next mode, high byte, low byte of which notes to render
 (defsub (handle-next-play-note high-byte-notes low-byte-notes)
   (let ((cur-note) (rest-after-this-note))
     (set! cur-note (peek g-song-play-index))
     (set! g-debug cur-note)
     (set! rest-after-this-note (and #b10000000 cur-note))
     (cond
      ((and cur-note #x1)  ; directive mode
       (if (eq? 0 (and cur-note #b00000110))
	   (return #x1 0 0)
	   #f))
      ((eq? #x00 (and cur-note #b00000110))  ; rest
       (inc-g-song-play-index)
       (return
	(or #x1 (and #b01111100 (>> cur-note 1)))
	high-byte-notes
	low-byte-notes))
      ((eq? #x02 (and cur-note #b00000110))  ; strike-note
       (set-multiple! high-byte-notes low-byte-notes
		      (add-note-index-to-mask (and #b00001111 (>> cur-note 3)) high-byte-notes low-byte-notes))
       (inc-g-song-play-index)
       (if rest-after-this-note
	   (return #x1 high-byte-notes low-byte-notes)
	   (return 0 high-byte-notes low-byte-notes))))))

  (defsub (inc-g-song-play-index)
   (let ((tmp))
     (set! tmp 1)
     (set-pointer! g-song-play-index (+ g-song-play-index tmp))))


 ;;;; CONTROLLER LOGIC
 ;; read in joypad input
 (defsub (read-joypads)
     ;; request data from joypads
     (set! REG-JOYPAD-0 1)
     (set! REG-JOYPAD-0 0)
     (read-joypad-0 0)
     (read-joypad-0 2)
     (loop n 0 8
     	   (peek REG-JOYPAD-0))
     (set! REG-JOYPAD-1 1)
     (set! REG-JOYPAD-1 0)
     (read-joypad-1 1)
     (read-joypad-1 3)
     (loop n 0 8
     	   (peek REG-JOYPAD-1))
     (update-pad-presses))

 ;; read input from joy port 0
 ;; TODO: should be able to use macros or pass an address arg to consolidate this with read-joypad-1
 (defsub (read-joypad-0 store-offset)
   (let ((pad))
     (set! pad 0)
     (loop n 0 8
	   (set! pad (<< pad 1))
	   (set! pad (or pad (and (peek REG-JOYPAD-0 0) #x1))))
     (poke! pad-data store-offset pad)))

 ;; read input from joy port 1
 ;; TODO: should be able to use macros or pass an address arg to consolidate this with read-joypad-0
 (defsub (read-joypad-1 store-offset)
   (let ((pad))
     (set! pad 0)
     (loop n 0 8
	   (set! pad (<< pad 1))
	   (set! pad (or pad (and (peek REG-JOYPAD-1 0) #x1))))
     (poke! pad-data store-offset pad)))

 ;; update last frame and pad presses
 (defsub (update-pad-presses)
   (let ((rising-edge))
   (loop n 0 4
	 (set! rising-edge (xor (peek pad-data-last-frame n) #xff))
	 (poke! pad-press n (and (peek pad-data n) rising-edge))
	 (poke! pad-data-last-frame n (peek pad-data n)))))


 ;; check to see if button on controller was pressed
 (defsub (button-pressed which-controller which-button)
   (return (and (peek pad-press which-controller) which-button)))

 ;;;; GRAPHICS ROUTINES
 (defsub (update-scroll)
   (if (eq? g-scroll-delay-ctr 0)
       (do
	   (inc g-scroll-low)
	   (if (eq? g-scroll-low 0)
	       (set! g-scroll-high (and (not g-scroll-high) #x1))
	       #f)
	 (set! g-scroll-delay-ctr 1)
	 (if (eq? 7 (and g-scroll-low #b00000111))
	     (step-draw-note)
	     #f)
	 (if (eq? 4 (and g-scroll-low #b00000111))
	     (auto-play-notes)
	     #f))
       (dec g-scroll-delay-ctr)))

 ;; Plot the notes at the location of screen just off scroll FOV
 (defsub (plot-notes first-eight second-eight)
   (let ((high-nametable-byte) (low-nametable-byte))
     (set-multiple! high-nametable-byte low-nametable-byte (find-scroll-edge))
     ;; switch to vertical VRAM update mode
     (set! REG-PPU-CTRL (or game-on-ppu-ctrl ppu-ctrl-vram-increment-mask))
     (set! REG-PPU-ADDR high-nametable-byte)
     (set! REG-PPU-ADDR low-nametable-byte)
     (plot-some-notes first-eight)
     (plot-some-notes second-eight)
     ;; back to horizontal VRAM update mode
     (set! REG-PPU-CTRL game-on-ppu-ctrl)))

 ;; find the top-left nametable address of the first column past the right edge of the screen
 (defsub (find-scroll-edge)
   (let ((high-byte) (low-byte))
     (if (eq? 1 g-scroll-high)
	 (set! high-byte #x21)  ;; high byte nametable 1
	 (set! high-byte #x25)) ;; high byte nametable 2
     ;; TODO(mtomczak): Does this want to be + 8 to make sure we're all the way off screen?
     (set! low-byte (>> g-scroll-low 3))  ;; low-8-bits of scroll / 8
     (return high-byte low-byte)))

 ;; plot 8 notes at the VRAM stripe pointed to by REG-PPU-ADDR. Low-order bit is the first note
 (defsub (plot-some-notes notes)
   (loop n 0 8
	 (if (eq? 0 (and notes #x1))
	     (set! REG-PPU-DATA staff-chr)
	     (set! REG-PPU-DATA note-chr))
	 (set! notes (>> notes 1))))

 ;; animation update for sprites
 (defsub (anim-sprites)
   (let ((cur-x) (cur-y) (cur-anim-frame) (tmp))
     (loop n 0 num-sprites
	   (set! cur-x (peek sprite-pos-x n))
	   (set! cur-y (peek sprite-pos-y n))
	   (set! cur-anim-frame (peek sprite-anim-frame n))
	   (if (not (eq? cur-anim-frame ANIM-STOPPED))
	       (do
		   (set-multiple! cur-x cur-y (calculate-sprite-offset cur-x cur-y cur-anim-frame))
		   (update-anim-frame n cur-anim-frame))
	       #f)
	   (set-sprite-x! n cur-x)
	   (set-sprite-y! n cur-y))))

 (defsub (calculate-sprite-offset cur-x cur-y cur-anim-frame)
   (let ((tmp))
   (set! cur-x (+ cur-x (peek animations (<< cur-anim-frame 1))))
   ;; this shouldn't be necessary, but it appears (+ 1 a) freaks out if a is a left-shift expression
   (set! tmp (<< cur-anim-frame 1))
   (set! cur-y (+ cur-y (peek animations (+ 1 tmp))))
   (return cur-x cur-y)))

 (defsub (update-anim-frame sprite-idx cur-anim-frame)
   (inc cur-anim-frame)
   (if (eq? (peek animations (<< cur-anim-frame 1)) #x80)
       (set! cur-anim-frame ANIM-STOPPED) #f)
   (poke! sprite-anim-frame sprite-idx cur-anim-frame))

 ;;;; AUDIO ROUTINES


 (defsub (play-notes)
   (let ((mask) (bank-contents))
     (loop bank 0 2
	   (set! mask 1)
	   (set! bank-contents (peek notes-to-sound bank))
	   (loop wave 0 8
		 (if (and mask bank-contents)
		     (play-note (+ (<< bank 3) wave))
		     #f)
		 (set! mask (<< mask 1)))))
   (poke! notes-to-sound 0 0)
   (poke! notes-to-sound 1 0))

 (defsub (play-note which-note)
   (set! which-note (<< which-note 1))
   (let ((ft) (ct))
     (set! ct (or (<< #b00011111 3) (peek notes-c-major which-note)))
     (inc which-note)
     (set! ft (peek notes-c-major which-note))
     (if g-which-pulse
	 (do
	     (set! REG-APU-PULSE2-CONTROL #b10000011)
	     (set! REG-APU-PULSE2-RAMP #b00000000)
	   (set! REG-APU-PULSE2-FT ft)
	   (set! REG-APU-PULSE2-CT ct))
	 (do
	     	     (set! REG-APU-PULSE1-CONTROL #b10000011)
	     (set! REG-APU-PULSE1-RAMP #b00000000)
	   (set! REG-APU-PULSE1-FT ft)
	   (set! REG-APU-PULSE1-CT ct))))
   (inc g-which-pulse)
   (set! g-which-pulse (and g-which-pulse #x01)))

 ;;;; DATA SECTION

 ;; mapping from buttons to waves
 ;; mapping is pairs of the form controller-id, which-button
 (deflabel controller-mapping)
 (bytes
  0 joypad-left
  0 joypad-right
  0 joypad-b
  0 joypad-a
  1 joypad-left
  1 joypad-right
  1 joypad-b
  1 joypad-a
  2 joypad-left
  2 joypad-right
  2 joypad-b
  2 joypad-a
  3 joypad-left
  3 joypad-right
  3 joypad-b
  3 joypad-a)

 ;; mappings from waves to notes
 ;; from wave0 (high note) to wave15 (low note)
 ;; high-order byte, low-order byte
 (deflabel notes-c-major)
 (bytes
  #x1 #x3f
  #x1 #x52
  #x1 #x67
  #x1 #x7c
  #x1 #x93
  #x1 #xab
  #x1 #xc4
  #x1 #xdf

  #x1 #xfb
  #x2 #x1a
  #x2 #x3a
  #x2 #x5c
  #x2 #x80
  #x2 #xa6
  #x2 #xce
  #x2 #xf9
  )


 ;; Main palette
 (deflabel palette)
 (bytes
  #x0f ; background color
  #x20 #x15 #x14  ; bg palette 1
  #x0f
  #x01 #x2A #x12  ; bg palette 2
  #x0f
  #x11 #x11 #x31  ; bg palette 3
  #x0f
  #x20 #x38 #xcc  ; bg palette 4

  #x0F
  #x20 #x15 #x14  ; fg palette 1 (player 1)
  #x0F
  #x20 #x2A #x14  ; fg palette 2 (player 2)
  #x0F
  #x20 #x11 #x14  ; fg palette 3 (player 3)
  #x0F
  #x00 #x38 #x14  ; fg palette 4 (player 4)
  )

 ;; animation scripts
 ;; x and y offsets of animation
 ;; #x80 is a sentinel value to end animation
 (deflabel animations)
 (bytes
  ;; bell ding
  #x02 #x00
  #x04 #x00
  #x04 #x00
  #x04 #x00
  #x04 #x00
  #x03 #x00
  #x02 #x00
  #x02 #x00
  #x01 #x00
  #x01 #x00
  #x80)

 ;;;; SONG DATA
 ;; Song data format
 ;; 8 bits per note, formatted as follows
 ;; H------L
 ;; RNNNNCCD
 ;; D: "directive", switches between node mode (0) and directive mode (1)
 ;;
 ;; - IN NODE MODE -
 ;; CC: control
 ;; - 00: rest. NNNN is # of empty beats
 ;; - 01: strike. NNNN is note ID (0 is the top-most wave)
 ;; - 10: strike hold / hold end. NNNN is note ID
 ;; - 11: reserved for future use
 ;; NNNN: either index of note to sound or low-order 4 bits of beats to rest
 ;;
 ;; R: If note is sounded, setting this to 1 indicates this is last note to
 ;;  sound on this beat.  beat. If CC is 00, this is high order bit of beats to
 ;;  rest
 ;;
 ;; - IN DIRECTIVE MODE -
 ;; CC: control
 ;; - 00: end of song. Stop rendering new notes
 (deflabel song1)
 ;; Mary Had A Little Lamb
 ;; 14 - low c
 ;; 12 - low d
 ;; 10 - low e
 ;; 7  - low g
 (bytes
  #b11010010
  #b11100010
  #b11110010
  #b11100010
  #b11010010
  #b11010010
  #b11010010
  #b00000000
  #b11100010
  #b11100010
  #b11100010
  #b00000000
  #b11010010
  #b10111010
  #b10111010
  #b00000000
  #b11010010
  #b11100010
  #b11110010
  #b11100010
  #b11010010
  #b11010010
  #b11010010
  #b11010010
  #b11100010
  #b11100010
  #b11010010
  #b11100010
  #b11110010

  #b00000001
  )

 (program-complete)
 (asm
".incbin \"handwave.chr\"
; fill the rest of the first chr-rom block with zeroes.
.align $1000"))


